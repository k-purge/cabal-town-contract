;; Jetton Contract

#include "imports/stdlib.fc";
#include "imports/mathlib.fc";
#include "imports/params.fc";
#include "imports/op-codes.fc";
#include "imports/error-codes.fc";
#include "imports/messages.fc";
#include "imports/jetton-utils.fc";
;; Jettons minter smart contract

(int, int, int, int, slice, cell, cell, cell) load_data() inline {
  slice ds = get_data().begin_parse();
  return (
      ds~load_uint(128), ;; total_supply
      ds~load_uint(128),  ;; circulating_supply
      ds~load_uint(32),  ;; reserve_rate
      ds~load_uint(64),  ;; reserve_balance
      ds~load_msg_addr(), ;; admin_address
      ds~load_ref(), ;; content
      ds~load_ref(),  ;; jetton_wallet_code
      ds~load_dict() ;; roles dictionary
  );
}

() save_data(int total_supply, int circulating_supply, int reserve_rate, int reserve_balance, slice admin_address, cell content, cell jetton_wallet_code, cell roles) impure inline {
  set_data(begin_cell()
            .store_uint(total_supply, 128)
            .store_uint(circulating_supply, 128)
            .store_uint(reserve_rate, 32)
            .store_uint(reserve_balance, 64)
            .store_slice(admin_address)
            .store_ref(content)
            .store_ref(jetton_wallet_code)
            .store_dict(roles)
           .end_cell()
          );
}

;; Check if an address has a specific role
int has_role(slice address, int role) inline {
    var (_, _, _, _, _, _, _, roles) = load_data();
    
    if (roles.cell_null?()) {
     return 0; ;; Role not found
    }
    
    ;;  Parse the standard address into workchain and address hash
    (int wc, int addr_hash) = parse_std_addr(address);

    ;; Ensure the workchain is the expected one (e.g., 0)
    throw_unless(error::pool_workchain_unmatched, wc == 0);

    ;; Attempt to retrieve the role from the dictionary
    (slice role_slice, int found?) = roles.udict_get?(ADDR_SIZE, addr_hash);

    ;; Check if the role was found in the dictionary
    return (found? & (role_slice~load_uint(8) == role));
}

;; Add a role to an address (only ADMIN can do this)
() add_role(slice sender_address, slice target_address, int role) impure {
    ;; Load data and extract the ADMIN address
    var (total_supply, circulating_supply, reserve_rate, reserve_balance, admin_address, content, jetton_wallet_code, roles) = load_data();

    ;; Ensure only ADMIN can assign roles
    throw_unless(error::unauthorized_request, equal_slices(sender_address, admin_address));

    ;; Parse the target address
    (int wc, int addr_hash) = parse_std_addr(target_address);

    ;; Ensure the workchain ID is valid (e.g., 0)
    throw_unless(error::pool_workchain_unmatched, wc == 0);

    slice role_slice = begin_cell()
            .store_uint(role, 8) ;; role
            .end_cell()
            .begin_parse();

    ;; Set the role in the dictionary
    roles~udict_set(ADDR_SIZE, addr_hash, role_slice);

    save_data(total_supply, circulating_supply, reserve_rate, reserve_balance, admin_address, content, jetton_wallet_code, roles);
}

;; Formula:
;; _supply * (((1 + _depositAmount / _reservedBalance) ^ (1 / _connectorWeight)) - 1)
int cal_purchase_return(int reserve_token_received, int circulating_supply, int reserve_rate, int reserve_balance) impure inline {
    if (reserve_balance < MIN_RESERVE_BALANCE) {
        return 0;
    }

    ;; Step 1: Compute the fraction (_depositAmount / _reservedBalance)
    int fraction = muldivr(reserve_token_received, 1 << 248, reserve_balance);
    
    ;; Step 2: Add 1 to the fraction
    int base = (1 << 248) + fraction;
    
    ;; Step 3: Compute the natural logarithm of the base
    int log_value = fixed248::log(base);
    
    ;; Step 4: Scale the logarithm by (r / _connectorWeight)
    int scaled_log = muldivr(log_value, reserve_rate, RATE_SCALER);
    
    ;; Step 5: Compute the exponential of the scaled logarithm
    int exp_value = fixed248::exp(scaled_log);
    
    ;; Step 6: Subtract 1 from the exponential result
    int adjusted_exp = exp_value - (1 << 248);
    
    ;; Step 7: Multiply by _supply to compute the final purchase return
    return  muldivr(circulating_supply, adjusted_exp, 1 << 248);
}

;; Formula:
;; Return = _connectorBalance * (1 - (1 - _sellAmount / _supply) ^ (1 / (_connectorWeight / 10000)))
;; Return = _connectorBalance * (1 - exp((10000 / _connectorWeight) * log(1 - _sellAmount / _supply)))
int cal_sale_return(int sell_amt, int circulating_supply, int reserve_rate, int reserve_balance) impure inline {
    ;; Ensure circulating_supply and sell_amt are non-zero to avoid division by zero
    if ((circulating_supply == 0) | (sell_amt == 0) | sell_amt > circulating_supply) {
        return 0;  ;; No tokens to convert or no supply, return zero
    }

    ;; Handle the edge case where _sellAmount == _supply
    if (sell_amt >= circulating_supply) {
      return reserve_balance;
    }

    ;; Step 1: Compute log(1 - _sellAmount / _supply)
    int log_value = fixed248::log((1 << 248) - muldivr(sell_amt, 1 << 248, circulating_supply));
    
    ;; Step 2: Scale log_value by (10000 / _connectorWeight)
    int scaled_log = muldivr(log_value, RATE_SCALER, reserve_rate);
    
    ;; Step 3: Compute exp(scaled_log)
    int exp_value = fixed248::exp(scaled_log);
    
    ;; Step 4: Compute the final return
    return muldivr(reserve_balance, (1 << 248) - exp_value, 1 << 248);
}

() transfer_buy_tokens(slice sender_address, int jettonAmt, cell jetton_wallet_code, int value) impure {
  ;; BUY jettons
  cell state_init = calculate_jetton_wallet_state_init(sender_address, my_address(), jetton_wallet_code);
  slice jetton_wallet_address = calculate_jetton_wallet_address(state_init);
  slice from_wallet_address = my_address();
  slice to_wallet_address = sender_address;

  var master_msg = begin_cell()
            .store_uint(op::internal_transfer(), 32)
            .store_uint(0, 64) ;; quert_id
            .store_coins(jettonAmt)
            .store_slice(to_wallet_address) ;; from_address
            .store_slice(to_wallet_address) ;; response_address
            .store_coins(FORWARD_FEE) ;; forward_amount
            .store_uint(0, 1) ;; forward_payload in this slice, not separate cell
            .end_cell();

  var msg = begin_cell()
    .store_uint(msgflag::BOUNCEABLE, 6)
    .store_slice(jetton_wallet_address)
    .store_coins(value) ;; for transferToJWallet
    .store_uint(4 + 2 + 1, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)
    .store_ref(state_init)
    .store_ref(master_msg);

  send_raw_message(msg.end_cell(), sendmode::PAY_FEES_SEPARATELY); ;; pay transfer fees separately, revert on errors
}

() send_ton(slice to_address, int tonAmt) impure {
  ;; SEND jettons
  if (to_address.preload_uint(2) != 0) {
    var msg = begin_cell()
      .store_uint(msgflag::BOUNCEABLE, 6) ;; nobounce - int_msg_info$0 ihr_disabled:Bool bounce:Bool bounced:Bool src:MsgAddress -> 011000
      .store_slice(to_address)
      .store_coins(tonAmt)
      .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1);

    send_raw_message(msg.end_cell(), sendmode::PAY_FEES_SEPARATELY);
  }
  return ();
}

() transfer_sell_tokens(slice sender_address, int jettonAmt, int tonAmt, cell jetton_wallet_code) impure {
  ;; SELL jettons
  cell state_init = calculate_jetton_wallet_state_init(sender_address, my_address(), jetton_wallet_code);
  slice jetton_wallet = calculate_jetton_wallet_address(state_init);

  var master_msg = begin_cell()
            .store_uint(op::sell_token(), 32)
            .store_uint(0, 64) ;; quert_id
            .store_coins(jettonAmt)
            .store_slice(my_address())
            .store_slice(sender_address) ;; response_address
            .store_uint(0, 1) ;; custom_payload:(Maybe ^Cell)
            .store_coins(FORWARD_FEE) ;; forward_amount
            .store_uint(0, 1) ;; forward_payload in this slice, not separate cell
            .end_cell();

  var msg = begin_cell()
    .store_uint(msgflag::NON_BOUNCEABLE, 6) ;; NON_BOUNCEABLE
    .store_slice(jetton_wallet) ;; jetton seller
    .store_coins(FORWARD_FEE) ;; for transferToJWallet
    .store_uint(4 + 2 + 1, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)
    .store_ref(state_init)
    .store_ref(master_msg);

  send_raw_message(msg.end_cell(), sendmode::PAY_FEES_SEPARATELY); ;; pay transfer fees separately, revert on errors

  ;; send back TON to seller
  send_ton(sender_address, tonAmt);
}

() buy_tokens(int msg_value, slice sender_address, int reserve_token_received) impure {
  var (total_supply, circulating_supply, reserve_rate, reserve_balance, admin_address, content, jetton_wallet_code, roles) = load_data();

  ;; Transfer TON from buyer to the contract
  ;; throw if not enough msg_value
  throw_unless(error::not_enough_message_value, msg_value > 0);

  int new_reserve_balance = reserve_balance + reserve_token_received;
  
  ;; Calculate the cost using sigmoid bonding curve
  int purchase_amt = cal_purchase_return(reserve_token_received, circulating_supply, reserve_rate, new_reserve_balance);

  ;; Transfer tokens from contract to buyer
  transfer_buy_tokens(sender_address, purchase_amt, jetton_wallet_code, msg_value);

  ;; Increase circulating supply
  circulating_supply += purchase_amt;
  save_data(total_supply, circulating_supply, reserve_rate, new_reserve_balance, admin_address, content, jetton_wallet_code, roles);
}

() sell_tokens(slice sender_address, int sell_amt, int my_balance) impure {
  var (total_supply, circulating_supply, reserve_rate, reserve_balance, admin_address, content, jetton_wallet_code, roles) = load_data();
  throw_unless(error::not_enough_jettons, circulating_supply >= sell_amt);

  ;; Calculate the sale return in ton
  int sale_return = cal_sale_return(sell_amt, circulating_supply, reserve_rate, reserve_balance);
  throw_unless(error::not_enough_reserve_balance, reserve_balance >= sale_return);
  throw_unless(error::not_enough_tons, my_balance >= sale_return);

  transfer_sell_tokens(sender_address, sell_amt, sale_return, jetton_wallet_code);

  ;; Increase circulating supply
  circulating_supply -= sell_amt;
  reserve_balance -= sale_return;
  save_data(total_supply, circulating_supply, reserve_rate, reserve_balance, admin_address, content, jetton_wallet_code, roles);
}

() mint_tokens(slice to_address, cell jetton_wallet_code, int amount, cell master_msg) impure {
  var (_, _, _, _, admin_address, _, _, _) = load_data();

  cell state_init = calculate_jetton_wallet_state_init(to_address, my_address(), jetton_wallet_code);
  slice to_wallet_address = calculate_jetton_wallet_address(state_init);
  var msg = begin_cell()
    .store_uint(msgflag::BOUNCEABLE, 6)
    .store_slice(to_wallet_address)
    .store_coins(amount)
    .store_uint(4 + 2 + 1, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)
    .store_ref(state_init)
    .store_ref(master_msg);
  send_raw_message(msg.end_cell(), sendmode::PAY_FEES_SEPARATELY); ;; pay transfer fees separately, revert on errors
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    ;; ignore empty messages
    if (in_msg_body.slice_empty?()) {
        return ();
    }
    
    ;; Parse the incoming message
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);

    ;; Ignore bounced messages
    if (flags & 1) {
        return ();
    }

    slice sender_address = cs~load_msg_addr();

    ;; Load contract data
    var (total_supply, circulating_supply, reserve_rate, reserve_balance, admin_address, content, jetton_wallet_code, roles) = load_data();

    ;; Parse operation and query ID
    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    ;; Buy tokens
    if (op == op::buy_token()) {
        int reserve_token_received = in_msg_body~load_coins();
        buy_tokens(msg_value, sender_address, reserve_token_received);
        return ();
    }

    ;; Sell tokens
    if (op == op::sell_token()) {
        int sell_amt = in_msg_body~load_coins();
        sell_tokens(sender_address, sell_amt, my_balance);
        return ();
    }

    ;; Add role
    if (op == op::add_role()) {
        slice target_address = in_msg_body~load_msg_addr();
        cell role_ref = in_msg_body~load_ref();
        slice role_slice = role_ref.begin_parse();
        int role = role_slice~load_uint(8);

        add_role(sender_address, target_address, role);
        return ();
    }

    ;; Update bonding curve parameters
    ;; Required only operator can update
    if (op == op::update_bonding_curve_data()) {
      throw_unless(error::unauthorized_update_request, has_role(sender_address, ROLE_OPERATOR)); ;; Only OPERATOR can update bonding curve
      int new_reserve_rate = in_msg_body~load_uint(32);
      save_data(total_supply, circulating_supply, new_reserve_rate, reserve_balance, admin_address, content, jetton_wallet_code, roles);
      return ();
    }

    ;; Mint new tokens 
    ;; Required only minter can mint
    if (op == op::mint()) {
        throw_unless(error::unauthorized_mint_request, has_role(sender_address, ROLE_MINTER)); ;; Only MINTER can mint
        slice to_address = in_msg_body~load_msg_addr();
        int amount = in_msg_body~load_coins();
        cell master_msg = in_msg_body~load_ref();
        
        ;; Parse the master message
        slice master_msg_cs = master_msg.begin_parse();
        master_msg_cs~skip_bits(32 + 64); ;; Skip op and query_id
        int jetton_amount = master_msg_cs~load_coins();

        mint_tokens(to_address, jetton_wallet_code, amount, master_msg);
        save_data(total_supply + jetton_amount, circulating_supply + jetton_amount, reserve_rate, reserve_balance, admin_address, content, jetton_wallet_code, roles);
        return ();
    }

    ;; Handle burn notifications
    if (op == op::burn_notification()) {
        int jetton_amount = in_msg_body~load_coins();
        slice from_address = in_msg_body~load_msg_addr();
        throw_unless(error::unauthorized_burn_notification,
            equal_slices(calculate_user_jetton_wallet_address(from_address, my_address(), jetton_wallet_code), sender_address)
        );
        save_data(total_supply - jetton_amount, circulating_supply - jetton_amount, reserve_rate, reserve_balance, admin_address, content, jetton_wallet_code, roles);
        
        ;; Handle excess return if applicable
        slice response_address = in_msg_body~load_msg_addr();
        if (response_address.preload_uint(2) != 0) {
          var msg = begin_cell()
            .store_uint(msgflag::NON_BOUNCEABLE, 6) ;; nobounce - int_msg_info$0 ihr_disabled:Bool bounce:Bool bounced:Bool src:MsgAddress -> 011000
            .store_slice(response_address)
            .store_coins(0)
            .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
            .store_uint(op::excesses(), 32)
            .store_uint(query_id, 64);
          send_raw_message(msg.end_cell(), sendmode::IGNORE_ERRORS + sendmode::CARRY_ALL_REMAINING_MESSAGE_VALUE);
        }
        return ();
    }

    ;; If no valid operation is found, throw an error
    throw(0xffff);
}

(int, int, slice, cell, cell, int, int, int) get_jetton_data() method_id {
    var (total_supply, circulating_supply, reserve_rate, reserve_balance, admin_address, content, jetton_wallet_code, roles) = load_data();
    return (total_supply, -1, admin_address, content, jetton_wallet_code, circulating_supply, reserve_rate, reserve_balance);
}

slice get_wallet_address(slice owner_address) method_id {
    var (total_supply, circulating_supply, reserve_rate, reserve_balance, admin_address, content, jetton_wallet_code, roles) = load_data();
    return calculate_user_jetton_wallet_address(owner_address, my_address(), jetton_wallet_code);
}

int get_purchase_return(int reserve_token_received) method_id {
  var (_, circulating_supply, reserve_rate, reserve_balance, _, _, _, _) = load_data();
  int new_reserve_balance = reserve_token_received + reserve_balance;
  return cal_purchase_return(reserve_token_received, circulating_supply, reserve_rate, new_reserve_balance);
}

int get_sale_return(int sell_amt) method_id {
  var (_, circulating_supply, reserve_rate, reserve_balance, _, _, _, _) = load_data();
  return cal_sale_return(sell_amt, circulating_supply, reserve_rate, reserve_balance);
}

int get_has_role(slice address, int role) method_id {
  return has_role(address, role);
}
