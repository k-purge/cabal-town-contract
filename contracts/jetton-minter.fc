;; Jetton Contract

#include "imports/stdlib.fc";
#include "imports/params.fc";
#include "imports/op-codes.fc";
#include "imports/error-codes.fc";
#include "imports/messages.fc";
#include "imports/jetton-utils.fc";
;; Jettons minter smart contract

;; storage scheme
;; storage#_ total_supply:Coins admin_address:MsgAddress content:^Cell jetton_wallet_code:^Cell = Storage;
const int initial_reserve_balance = 1000000000;

(int, int, int, int, slice, cell, cell) load_data() inline {
  slice ds = get_data().begin_parse();
  return (
      ds~load_uint(64), ;; total_supply
      ds~load_uint(64),  ;; circulating_supply
      ds~load_uint(32),  ;; reserve_rate
      ds~load_uint(64),  ;; reserve_balance
      ds~load_msg_addr(), ;; admin_address
      ds~load_ref(), ;; content
      ds~load_ref()  ;; jetton_wallet_code
  );
}

() save_data(int total_supply, int circulating_supply, int reserve_rate, int reserve_balance, slice admin_address, cell content, cell jetton_wallet_code) impure inline {
  set_data(begin_cell()
            .store_uint(total_supply, 64)
            .store_uint(circulating_supply, 64)
            .store_uint(reserve_rate, 32)
            .store_uint(reserve_balance, 64)
            .store_slice(admin_address)
            .store_ref(content)
            .store_ref(jetton_wallet_code)
           .end_cell()
          );
}

int cal_purchase_return(int reserve_token_received, int circulating_supply, int reserve_rate, int reserve_balance) impure inline {
    ;; x = (reserve_token_received * SCALING_FACTOR) / (reserve_token_received + reserve_balance) (scale numerator first to avoid floating point)
    int x = (reserve_token_received * SCALING_FACTOR) / (reserve_token_received + reserve_balance);

    ;; r = reserve_rate (no scaling necessary, assume reserve_rate is already scaled appropriately for integer math)
    int r = reserve_rate * SCALING_FACTOR / RATE_SCALER;

    ;; Initialize result with the first term of the series (scaled)
    int result = SCALING_FACTOR;

    ;; Temporary variable for the current power of x (start with x^0 = SCALING_FACTOR)
    int x_pow = SCALING_FACTOR;

    int i = 1;
    while (i <= 10) {
        ;; Compute the next term in the series
        x_pow = (x_pow * x) / SCALING_FACTOR;  ;; x^i (scaled result)

        ;; Calculate the coefficient for the ith term: r * (r - SCALING_FACTOR) * ... * (r - (i - 1) * SCALING_FACTOR)
        int coefficient = r;
        int j = 1;
        while (j < i) {
            int diff = (r - j * SCALING_FACTOR);
            if (diff > -(DECIMAL_FACTOR)) {
                coefficient = (coefficient * diff) / SCALING_FACTOR;
            }
            j += 1;
        }

        ;; Add this term to the result
        result += (coefficient * x_pow) / SCALING_FACTOR;

        i += 1;
    }

    ;; Final result: circulating_supply * (result - SCALING_FACTOR) / SCALING_FACTOR
    return (circulating_supply * (result - SCALING_FACTOR)) / SCALING_FACTOR;
}

int cal_sale_return(int sell_amt, int circulating_supply, int reserve_rate, int reserve_balance) impure inline {
    ;; x = (sell_amt * SCALING_FACTOR) / circulating_supply (scaling the numerator first)
    int x = (sell_amt * SCALING_FACTOR) / circulating_supply;

    ;; r = SCALING_FACTOR / reserve_rate / RATE_SCALER (scaling up the division result)
    int r = SCALING_FACTOR / reserve_rate / RATE_SCALER;

    ;; Initialize result with the first term of the series (scaled)
    int result = SCALING_FACTOR;

    ;; Temporary variable for the current power of x (start with x^0 = SCALING_FACTOR)
    int x_pow = SCALING_FACTOR;

    ;; Initialize the sign to alternate between - and +
    int sign = -1;

    int i = 1;
    while (i <= 10) {
        ;; Compute the next term in the series
        x_pow = (x_pow * x / SCALING_FACTOR);  ;; x^i (scaled result)

        ;; Calculate the coefficient for the ith term: r * (r - SCALING_FACTOR) * ... * (r - (i - 1) * SCALING_FACTOR)
        int coefficient = r;

        int j = 1;
        while (j < i) {
            coefficient = (coefficient * (r - j * SCALING_FACTOR)) / SCALING_FACTOR;
            j += 1;
        }

        ;; Add or subtract this term to/from the result, alternating sign
        result += sign * (coefficient * x_pow);

        ;; Alternate the sign for the next term
        sign *= -1;

        i += 1;
    }

    int coefficientResult = reserve_balance * (SCALING_FACTOR - result);
    
    if (result < 0) {
        coefficientResult = (reserve_balance - initial_reserve_balance) * SCALING_FACTOR;
    }
    
    if (result > SCALING_FACTOR) {
        coefficientResult = reserve_balance;
    }

    ;; Final result: reserve_balance * (SCALING_FACTOR - result) / SCALING_FACTOR
    return coefficientResult / SCALING_FACTOR;
}

() transfer_buy_tokens(slice sender_address, int jettonAmt, cell jetton_wallet_code, int value) impure {
  ;; BUY jettons
  cell state_init = calculate_jetton_wallet_state_init(sender_address, my_address(), jetton_wallet_code);
  slice jetton_wallet_address = calculate_jetton_wallet_address(state_init);
  slice from_wallet_address = my_address();
  slice to_wallet_address = sender_address;

  var master_msg = begin_cell()
            .store_uint(op::internal_transfer(), 32)
            .store_uint(0, 64) ;; quert_id
            .store_coins(jettonAmt)
            .store_slice(to_wallet_address) ;; from_address
            .store_slice(to_wallet_address) ;; response_address
            .store_coins(10000000) ;; forward_amount
            .store_uint(0, 1) ;; forward_payload in this slice, not separate cell
            .end_cell();

  var msg = begin_cell()
    .store_uint(0x18, 6)
    .store_slice(jetton_wallet_address)
    .store_coins(value) ;; for transferToJWallet
    .store_uint(4 + 2 + 1, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)
    .store_ref(state_init)
    .store_ref(master_msg);

  send_raw_message(msg.end_cell(), sendmode::PAY_FEES_SEPARATELY); ;; pay transfer fees separately, revert on errors
}

() send_ton(slice to_address, int tonAmt) impure {
  ;; SEND jettons
  if (to_address.preload_uint(2) != 0) {
    var msg = begin_cell()
      .store_uint(0x18, 6) ;; nobounce - int_msg_info$0 ihr_disabled:Bool bounce:Bool bounced:Bool src:MsgAddress -> 011000
      .store_slice(to_address)
      .store_coins(tonAmt)
      .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1);

    send_raw_message(msg.end_cell(), sendmode::PAY_FEES_SEPARATELY);
  }
  return ();
}

() transfer_sell_tokens(slice sender_address, int jettonAmt, int tonAmt, int value, cell jetton_wallet_code) impure {
  ;; SELL jettons
  cell state_init = calculate_jetton_wallet_state_init(sender_address, my_address(), jetton_wallet_code);
  slice jetton_wallet = calculate_jetton_wallet_address(state_init);
  
  var master_msg = begin_cell()
            .store_uint(op::sell_token(), 32)
            .store_uint(0, 64) ;; quert_id
            .store_coins(jettonAmt)
            .store_slice(my_address())
            .store_slice(sender_address) ;; response_address
            .store_uint(0, 1) ;; custom_payload:(Maybe ^Cell)
            .store_coins(10000000) ;; forward_amount
            .store_uint(0, 1) ;; forward_payload in this slice, not separate cell
            .end_cell();

  var msg = begin_cell()
    .store_uint(0x10, 6) ;; NON_BOUNCEABLE
    .store_slice(jetton_wallet) ;; jetton seller
    .store_coins(value) ;; for transferToJWallet
    .store_uint(4 + 2 + 1, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)
    .store_ref(state_init)
    .store_ref(master_msg);

  send_raw_message(msg.end_cell(), sendmode::PAY_FEES_SEPARATELY); ;; pay transfer fees separately, revert on errors

  ;; send back TON to seller
  send_ton(sender_address, tonAmt);
}

() buy_tokens(int msg_value, slice sender_address, int reserve_token_received) impure {
  var (total_supply, circulating_supply, reserve_rate, reserve_balance, admin_address, content, jetton_wallet_code) = load_data();
  
  ;; Calculate the cost using sigmoid bonding curve
  int purchase_amt = cal_purchase_return(reserve_token_received, circulating_supply, reserve_rate, reserve_balance);

  int fee = reserve_token_received * NETWORK_FEE_RATE / 100;
  int totalCost = reserve_token_received + fee;
  int value = msg_value - totalCost;

  ;; Transfer TON from buyer to the contract
  ;; throw if not enough msg_value
  throw_unless(76, value > 0);

  ;; Transfer tokens from contract to buyer
  transfer_buy_tokens(sender_address, purchase_amt, jetton_wallet_code, value);

  ;; Increase circulating supply
  circulating_supply += purchase_amt;
  reserve_balance += reserve_token_received;
  save_data(total_supply, circulating_supply, reserve_rate, reserve_balance, admin_address, content, jetton_wallet_code);
}

() sell_tokens(int msg_value, slice sender_address, int sell_amt) impure {
  var (total_supply, circulating_supply, reserve_rate, reserve_balance, admin_address, content, jetton_wallet_code) = load_data();
  
  ;; Calculate the sale return in ton
  int sale_return = cal_sale_return(sell_amt, circulating_supply, reserve_rate, reserve_balance);

  int fee = sale_return * NETWORK_FEE_RATE / 100;
  int value = msg_value - fee;

  transfer_sell_tokens(sender_address, sell_amt, sale_return, value, jetton_wallet_code);

  ;; Increase circulating supply
  circulating_supply -= sell_amt;
  reserve_balance -= sale_return;
  save_data(total_supply, circulating_supply, reserve_rate, reserve_balance, admin_address, content, jetton_wallet_code);
}

() mint_tokens(slice to_address, cell jetton_wallet_code, int amount, cell master_msg) impure {
  var (_, _, _, _, admin_address, _, _) = load_data();
  ;; Check if the caller is the contract owner
  throw_unless(73, equal_slices(to_address, admin_address));

  cell state_init = calculate_jetton_wallet_state_init(to_address, my_address(), jetton_wallet_code);
  slice to_wallet_address = calculate_jetton_wallet_address(state_init);
  var msg = begin_cell()
    .store_uint(0x18, 6)
    .store_slice(to_wallet_address)
    .store_coins(amount)
    .store_uint(4 + 2 + 1, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)
    .store_ref(state_init)
    .store_ref(master_msg);
  send_raw_message(msg.end_cell(), sendmode::PAY_FEES_SEPARATELY); ;; pay transfer fees separately, revert on errors
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore empty messages
        return ();
    }
    
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);

    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }
    slice sender_address = cs~load_msg_addr();

    var (total_supply, circulating_supply, reserve_rate, reserve_balance, admin_address, content, jetton_wallet_code) = load_data();

    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    if (op == op::update_bonding_curve_data()) {
      int new_reserve_rate = in_msg_body~load_uint(32);
      int new_reserve_balance = in_msg_body~load_uint(64);
      save_data(total_supply, circulating_supply, new_reserve_rate, new_reserve_balance, admin_address, content, jetton_wallet_code);
      return ();
    }

    if (op == op::buy_token()) {
        int reserve_token_received = in_msg_body~load_coins();
        buy_tokens(msg_value, sender_address, reserve_token_received);
        return ();
    }

    ;; sell jetton to get back Ton
    if (op == op::sell_token()) {
        int sell_amt = in_msg_body~load_coins();
        sell_tokens(msg_value, sender_address, sell_amt);
        return ();
    }

    if (op == op::mint()) {
        throw_unless(73, equal_slices(sender_address, admin_address));
        slice to_address = in_msg_body~load_msg_addr();
        int amount = in_msg_body~load_coins();
        cell master_msg = in_msg_body~load_ref();
        slice master_msg_cs = master_msg.begin_parse();
        master_msg_cs~skip_bits(32 + 64); ;; op + query_id
        int jetton_amount = master_msg_cs~load_coins();

        mint_tokens(to_address, jetton_wallet_code, amount, master_msg);
        save_data(total_supply + jetton_amount, circulating_supply + jetton_amount, reserve_rate, reserve_balance, admin_address, content, jetton_wallet_code);
        return ();
    }

    if (op == op::burn_notification()) {
        int jetton_amount = in_msg_body~load_coins();
        slice from_address = in_msg_body~load_msg_addr();
        throw_unless(74,
            equal_slices(calculate_user_jetton_wallet_address(from_address, my_address(), jetton_wallet_code), sender_address)
        );
        save_data(total_supply - jetton_amount, circulating_supply - jetton_amount, reserve_rate, reserve_balance, admin_address, content, jetton_wallet_code);
        slice response_address = in_msg_body~load_msg_addr();
        if (response_address.preload_uint(2) != 0) {
          var msg = begin_cell()
            .store_uint(0x10, 6) ;; nobounce - int_msg_info$0 ihr_disabled:Bool bounce:Bool bounced:Bool src:MsgAddress -> 011000
            .store_slice(response_address)
            .store_coins(0)
            .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
            .store_uint(op::excesses(), 32)
            .store_uint(query_id, 64);
          send_raw_message(msg.end_cell(), sendmode::IGNORE_ERRORS + sendmode::CARRY_ALL_REMAINING_MESSAGE_VALUE);
        }
        return ();
    }

    ;; Withdraw tons fee to staking address
    if (op == op::transfer_reward_balance()) {
      throw_unless(error::unauthorized_transfer, equal_slices(admin_address, sender_address));
      raw_reserve(wallet_min_ton_balance, 0);

      slice staking_address = in_msg_body~load_msg_addr();

      int rewardBalance = (my_balance - wallet_min_ton_balance) * NETWORK_FEE_RATE / 100;
      
      var master_msg = begin_cell()
            .store_uint(op::jetton_pool_receive_fee(), 32)
            .store_uint(query_id, 64) ;; quert_id
            .store_uint(rewardBalance, 32) ;; reward
            .store_slice(sender_address) ;; response_address
            .store_uint(0, 1) ;; custom_payload:(Maybe ^Cell)
            .store_coins(FORWARD_FEE) ;; forward_amount
            .store_uint(0, 1) ;; forward_payload in this slice, not separate cell
            .end_cell();

      var msg = begin_cell()
              .store_msg_flag(msgflag::BOUNCEABLE)
              .store_slice(staking_address)
              .store_coins(0)
              .store_uint(1, 1 + 4 + 4 + 64 + 32 + 1 + 1)
              .store_ref(master_msg);
      send_raw_message(msg.end_cell(), sendmode::CARRY_ALL_REMAINING_MESSAGE_VALUE);

      ;; send reward TON to staking
      return send_ton(staking_address, rewardBalance);
    }

    ;; Withdraw tons or jettons which accidentally were sent to this jettonWallet
    if (op == op::withdraw_tons()) {
      throw_unless(error::unauthorized_transfer, equal_slices(admin_address, sender_address));
      raw_reserve(wallet_min_ton_balance, 0);
      var msg = begin_cell()
              .store_msg_flag(msgflag::BOUNCEABLE)
              .store_slice(admin_address)
              .store_coins(0)
              .store_msgbody_prefix_slice()
              .store_op(op::excesses())
              .store_query_id(in_msg_body~load_query_id());
      return send_raw_message(msg.end_cell(), sendmode::CARRY_ALL_BALANCE | sendmode::IGNORE_ERRORS);
    }

    throw(0xffff);
}

(int, int, slice, cell, cell, int, int, int) get_jetton_data() method_id {
    var (total_supply, circulating_supply, reserve_rate, reserve_balance, admin_address, content, jetton_wallet_code) = load_data();
    return (total_supply, -1, admin_address, content, jetton_wallet_code, circulating_supply, reserve_rate, reserve_balance);
}

slice get_wallet_address(slice owner_address) method_id {
    var (total_supply, circulating_supply, reserve_rate, reserve_balance, admin_address, content, jetton_wallet_code) = load_data();
    return calculate_user_jetton_wallet_address(owner_address, my_address(), jetton_wallet_code);
}

int get_purchase_return(int reserve_token_received) method_id {
  var (_, circulating_supply, reserve_rate, reserve_balance, _, _, _) = load_data();
  return cal_purchase_return(reserve_token_received, circulating_supply, reserve_rate, reserve_balance);
}

int get_sale_return(int sell_amt) method_id {
  var (_, circulating_supply, reserve_rate, reserve_balance, _, _, _) = load_data();
  return cal_sale_return(sell_amt, circulating_supply, reserve_rate, reserve_balance);
}
