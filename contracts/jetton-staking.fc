;; Jetton Staking Pool Contract

#include "imports/stdlib.fc";
#include "imports/params.fc";
#include "imports/op-codes.fc";
#include "imports/error-codes.fc";
#include "imports/messages.fc";
#include "imports/jetton-utils.fc";

(slice, slice, cell, int, int, int, cell) load_data() inline {
    slice ds = get_data().begin_parse();
    ;; Global state variables
    return (
        ds~load_msg_addr(), ;; admin_address
        ds~load_msg_addr(), ;; jetton_master_address
        ds~load_ref(), ;; jetton_wallet_code
        ds~load_uint(32), ;; Initial pool started timestamp in second
        ds~load_coins(), ;; Total amount deposited in the pool
        ds~load_coins(), ;; Total reward balance of the pool
        ds~load_dict()  ;; Dictionary to store user deposits
    );
}

() save_data(slice admin_addr, slice jetton_addr, cell jetton_wallet_code, int epoch_started_at, int total_deposited_amt, int total_reward_balance, cell deposits) impure inline {
    set_data(begin_cell()
            .store_slice(admin_addr)
            .store_slice(jetton_addr)
            .store_ref(jetton_wallet_code)
            .store_uint(epoch_started_at, 32)
            .store_coins(total_deposited_amt)
            .store_coins(total_reward_balance)
            .store_dict(deposits)
           .end_cell()
    );
}

(slice, int) unpack_user_deposit(int addr_hash) inline_ref {
    var (_, _, _, _, _, _, deposits) = load_data();

    if (deposits.cell_null?()) {
        return (null(), false);
    }

    (slice deposit_data, int found?) = deposits.udict_get?(ADDR_SIZE, addr_hash);

    return (deposit_data, found?);
}

(slice) pack_user_deposit(int deposited_amt, int unclaimed_reward, int started_timestamp, int updated_timestamp) inline_ref {
    slice deposit_slice = begin_cell()
        .store_coins(deposited_amt) ;; user deposited amt
        .store_coins(unclaimed_reward) ;; user unclaimed reward
        .store_uint(started_timestamp, 32) ;; deposit started timestamp
        .store_uint(updated_timestamp, 32) ;; deposit updated timestamp
        .end_cell()
        .begin_parse();

    return (deposit_slice);
}

;; Send TON frunction
() send_grams(slice to_address, int amount, int send_mode) impure inline_ref {
    if (to_address.preload_uint(2) != 0) {
        var msg = begin_cell()
        .store_uint(0x18, 6)
        .store_slice(to_address)
        .store_grams(amount)
        .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
        .store_uint(0, 32)
        .store_uint(0, 64);
        send_raw_message(msg.end_cell(), send_mode);
    }
}

;; Calculate reward function
(int) calculate_reward(int deposit_amt, int timestamp_now, int last_updated_at, int total_deposited_amt, int total_reward_balance, int epoch_started_at) inline_ref {
    ;; UnClaimedReward(U) = f(x) = \frac {userDeposit} {poolTotalDeposit} * (timeNow - lastUpdatedAt) * R + U_1
    throw_unless(error::pool_not_enough_deposit, deposit_amt > 0);
    throw_unless(error::pool_timestamp_error, (timestamp_now - last_updated_at) > 0);

    int reward_per_second = total_reward_balance / (timestamp_now - epoch_started_at);

    return ((deposit_amt / total_deposited_amt) * (timestamp_now - last_updated_at) * reward_per_second);
}

;; Receive fee from Jetton frunction
() recevie_fee(int reward) impure {
    ;; Reward(R)_2 = f(x)= \frac {R_1 + R} {timeNow - epochStartedAt}
    var (admin_addr, jetton_addr, jetton_wallet_code, epoch_started_at, total_deposited_amt, total_reward_balance, deposits) = load_data();

    total_reward_balance += reward;

    save_data(admin_addr, jetton_addr, jetton_wallet_code, epoch_started_at, total_deposited_amt, total_reward_balance, deposits);
}

;; Deposit function
() deposit_jetton(slice sender_address, slice user_address, int jetton_amount, int time_now) impure {
    ;; Global state variables
    var (admin_addr, jetton_addr, jetton_wallet_code, epoch_started_at, total_deposited_amt, total_reward_balance, deposits) = load_data();

    throw_unless(error::pool_deposit_address_unmatched,
        equal_slices(calculate_user_jetton_wallet_address(my_address(), jetton_addr, jetton_wallet_code), sender_address)
    );

    (int wc, int addr_hash) = parse_std_addr(user_address);
    throw_unless(error::pool_workchain_unmatched, wc == 0);  ;; Example error if the workchain is incorrect

    int user_deposit = 0;
    int unclaimed_reward = 0;
    int started_timestamp = time_now;
    int updated_timestamp = time_now;

    (slice deposit_data, int found?) = unpack_user_deposit(addr_hash);
    if (found?) {
        user_deposit = deposit_data~load_coins();
        unclaimed_reward = deposit_data~load_coins();
        started_timestamp = deposit_data~load_uint(32);
        int last_updated_timestamp = deposit_data~load_uint(32);

        int reward = calculate_reward(user_deposit, time_now, last_updated_timestamp, total_deposited_amt, total_reward_balance, epoch_started_at);
        unclaimed_reward += reward;
        total_reward_balance -= reward;
    }
    user_deposit += jetton_amount;
    total_deposited_amt += jetton_amount;

    slice deposit_slice = pack_user_deposit(user_deposit, unclaimed_reward, started_timestamp, updated_timestamp);
    deposits~udict_set(ADDR_SIZE, addr_hash, deposit_slice);

    save_data(admin_addr, jetton_addr, jetton_wallet_code, epoch_started_at, total_deposited_amt, total_reward_balance, deposits);
}

;; Claim reward function
() claim_reward(slice sender_address, int time_now) impure {
    var (admin_addr, jetton_addr, jetton_wallet_code, epoch_started_at, total_deposited_amt, total_reward_balance, deposits) = load_data();
    
    (int wc, int addr_hash) = parse_std_addr(sender_address);
    throw_unless(error::pool_workchain_unmatched, wc == 0);  ;; error if the workchain is incorrect
    
    (slice deposit_data, int found?) = unpack_user_deposit(addr_hash);
    ifnot (found?) {
        return (); 
    }

    int user_deposit = deposit_data~load_coins();
    int unclaimed_reward = deposit_data~load_coins();
    int started_timestamp = deposit_data~load_uint(32);
    int last_updated_timestamp = deposit_data~load_uint(32);

    int reward = calculate_reward(user_deposit, time_now, last_updated_timestamp, total_deposited_amt, total_reward_balance, epoch_started_at);
    int total_unclaimed_reward = unclaimed_reward + reward;
    
    total_reward_balance -= reward;
    unclaimed_reward = 0;

    slice deposit_slice = pack_user_deposit(user_deposit, unclaimed_reward, started_timestamp, time_now);
    deposits~udict_set(ADDR_SIZE, addr_hash, deposit_slice);

    save_data(admin_addr, jetton_addr, jetton_wallet_code, epoch_started_at, total_deposited_amt, total_reward_balance, deposits);

    ;; send TON to user
    send_grams(sender_address, total_unclaimed_reward, sendmode::PAY_FEES_SEPARATELY);
    
    return ();
}

;; Withdraw deposit function
() withdraw_jetton(int msg_value, slice sender_address, int jetton_amount, int time_now, cell second_operation_cell) impure {
    var (admin_addr, jetton_addr, jetton_wallet_code, epoch_started_at, total_deposited_amt, total_reward_balance, deposits) = load_data();
    
    (int wc, int addr_hash) = parse_std_addr(sender_address);
    throw_unless(error::pool_workchain_unmatched, wc == 0);  ;; error if the workchain is incorrect
    
    (slice deposit_data, int found?) = unpack_user_deposit(addr_hash);
    ifnot (found?) {
        return (); 
    }

    int user_deposit = deposit_data~load_coins();
    int unclaimed_reward = deposit_data~load_coins();
    int started_timestamp = deposit_data~load_uint(32);
    int last_updated_timestamp = deposit_data~load_uint(32);

    int reward = calculate_reward(user_deposit, time_now, last_updated_timestamp, total_deposited_amt, total_reward_balance, epoch_started_at);
    int total_unclaimed_reward = unclaimed_reward + reward;
    total_deposited_amt -= jetton_amount;
    total_reward_balance -= reward;
    user_deposit -= jetton_amount;
    unclaimed_reward = 0;

    slice deposit_slice = pack_user_deposit(user_deposit, unclaimed_reward, started_timestamp, time_now);
    deposits~udict_set(ADDR_SIZE, addr_hash, deposit_slice);
    
    if (total_unclaimed_reward > 0) {
        int value = 2 * gas_consumption() + min_tons_for_storage();
        msg_value -= value;
        throw_unless(error::pool_withdrawal_not_enough_gas, msg_value > value);

        send_grams(sender_address, total_unclaimed_reward, sendmode::PAY_FEES_SEPARATELY);
    }
   
    ifnot(second_operation_cell.null?()) {
        ;; Parse the second operation
        slice second_op_slice = second_operation_cell.begin_parse();

        int second_op = second_op_slice~load_uint(32);
        
        if (second_op == op::withdraw_token()) {
            ;; Execute the second operation based on the extracted data
            cell state_init = calculate_jetton_wallet_state_init(my_address(), jetton_addr, jetton_wallet_code);
            slice staking_wallet_address = calculate_jetton_wallet_address(state_init);
            int query_id = second_op_slice~load_uint(64);
            int second_fwd_fee = second_op_slice~load_coins();
          
            var msg = begin_cell()
                .store_uint(0x18, 6)
                .store_slice(staking_wallet_address)
                .store_coins(0)
                .store_uint(4 + 2 + 1, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)
                .store_ref(state_init);

            var msg_body = begin_cell()
                .store_uint(op::transfer(), 32)
                .store_uint(query_id, 64)
                .store_coins(jetton_amount)
                .store_slice(sender_address) ;; to_address
                .store_slice(my_address()) ;; from_address
                .store_uint(0, 1) ;; custom_payload:(Maybe ^Cell)
                .store_coins(second_fwd_fee) ;; forward_amount
                .store_uint(0, 1) ;; forward_payload in this slice, not separate cell
                .end_cell();

            msg = msg.store_ref(msg_body);

            ;; Process the extracted data to perform the second operation
            send_raw_message(msg.end_cell(), sendmode::CARRY_ALL_REMAINING_MESSAGE_VALUE); ;; revert on errors
        }
    }

    save_data(admin_addr, jetton_addr, jetton_wallet_code, epoch_started_at, total_deposited_amt, total_reward_balance, deposits);
}

() recv_internal(int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore empty messages
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);

    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }

    slice sender_address = cs~load_msg_addr();
 
    int op = in_msg_body~load_uint(32);

    if (op == op::jetton_pool_deposit()) {
        int query_id = in_msg_body~load_uint(64);
        slice user_address = in_msg_body~load_msg_addr();
        int jetton_amount = in_msg_body~load_coins();
        int time_now = in_msg_body~load_uint(32);
        return deposit_jetton(sender_address, user_address, jetton_amount, time_now);
    }

    if (op == op::jetton_pool_withdraw()) {
        int query_id = in_msg_body~load_uint(64);
        int jetton_amount = in_msg_body~load_coins();
        int time_now = in_msg_body~load_uint(32);
        cell second_operation_cell = in_msg_body~load_maybe_ref();
        return withdraw_jetton(msg_value, sender_address, jetton_amount, time_now, second_operation_cell);
    }

    if (op == op::jetton_pool_receive_fee()) {
        int query_id = in_msg_body~load_uint(64);
        int reward = in_msg_body~load_uint(32);
        return recevie_fee(reward);
    }

    if (op == op::jetton_pool_claim()) {
        int query_id = in_msg_body~load_uint(64);
        int time_now = in_msg_body~load_uint(32);
        return claim_reward(sender_address, time_now);
    }

    var (admin_addr, jetton_addr, jetton_wallet_code, epoch_started_at, total_deposited_amt, total_reward_balance, deposits) = load_data();

    ;; Withdraw tons or jettons which accidentally were sent to this jettonWallet
    if (op == op::withdraw_tons()) {
        throw_unless(error::unauthorized_transfer, equal_slices(admin_addr, sender_address));
        raw_reserve(wallet_min_ton_balance, 0);
        var msg = begin_cell()
            .store_msg_flag(msgflag::BOUNCEABLE)
            .store_slice(admin_addr)
            .store_coins(0)
            .store_msgbody_prefix_slice()
            .store_op(op::excesses())
            .store_query_id(in_msg_body~load_query_id());
        return send_raw_message(msg.end_cell(), sendmode::CARRY_ALL_BALANCE | sendmode::IGNORE_ERRORS);
    }

    if (op == op::withdraw_jettons()) {
        throw_unless(error::unauthorized_transfer, equal_slices(admin_addr, sender_address));
        int query_id = in_msg_body~load_query_id();
        slice child_wallet =  in_msg_body~load_msg_addr();
        int amount =  in_msg_body~load_coins();
        cell custom_payload = in_msg_body~load_maybe_ref();
        var msg = begin_cell()
            .store_msg_flag(msgflag::BOUNCEABLE)
            .store_slice(child_wallet)
            .store_coins(0)
            .store_msgbody_prefix_ref(
            begin_cell()
              .store_op(op::transfer())
              .store_query_id(query_id)
              .store_coins(amount)
              .store_slice(admin_addr)
              .store_slice(admin_addr)
              .store_maybe_ref(custom_payload)
              .store_coins(0)
              .store_int(false, 1)
              .end_cell()
        );
        return send_raw_message(msg.end_cell(), sendmode::CARRY_ALL_REMAINING_MESSAGE_VALUE);
    }

    throw(0xffff);
}

(int) get_user_reward(slice user_address, int time_now) method_id {
    var (_, _, _, epoch_started_at, total_deposited_amt, total_reward_balance, deposits) = load_data();
    
    (int wc, int addr_hash) = parse_std_addr(user_address);
    throw_unless(error::pool_workchain_unmatched, wc == 0);  ;; Example error if the workchain is incorrect
    
    (slice deposit_data, int found?) = unpack_user_deposit(addr_hash);
    ifnot (found?) {
        return (0);
    }
    
    int user_deposit = deposit_data~load_coins();
    int unclaimed_reward = deposit_data~load_coins();
    int started_timestamp = deposit_data~load_uint(32);
    int last_updated_timestamp = deposit_data~load_uint(32);

    return (calculate_reward(user_deposit, time_now, last_updated_timestamp, total_deposited_amt, total_reward_balance, epoch_started_at));
}

(slice) get_user_deposit(slice user_address) method_id {
    (int wc, int addr_hash) = parse_std_addr(user_address);

    (slice deposit_data, int found?) = unpack_user_deposit(addr_hash);

    return (deposit_data);
}

;; Calculate reward per sec function
(int) calculate_reward_per_sec(int timestamp_now, int total_reward_balance, int epoch_started_at) method_id {
    return (total_reward_balance / (timestamp_now - epoch_started_at));
}

(slice, slice, cell, int, int, int, cell) get_staking_data() method_id {
    var (admin_addr, jetton_addr, jetton_wallet_code, epoch_started_at, total_deposited_amt, total_reward_balance, deposits) = load_data();
    return (admin_addr, jetton_addr, jetton_wallet_code, epoch_started_at, total_deposited_amt, total_reward_balance, deposits);
}
